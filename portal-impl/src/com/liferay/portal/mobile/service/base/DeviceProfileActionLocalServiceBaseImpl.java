/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.mobile.service.base;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.search.Indexer;
import com.liferay.portal.kernel.search.IndexerRegistryUtil;
import com.liferay.portal.kernel.search.SearchException;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.mobile.model.DeviceProfileAction;
import com.liferay.portal.mobile.service.DeviceProfileActionLocalService;
import com.liferay.portal.mobile.service.DeviceProfileLocalService;
import com.liferay.portal.mobile.service.DeviceProfileRuleLocalService;
import com.liferay.portal.mobile.service.persistence.DeviceProfileActionPersistence;
import com.liferay.portal.mobile.service.persistence.DeviceProfilePersistence;
import com.liferay.portal.mobile.service.persistence.DeviceProfileRulePersistence;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourceFinder;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserFinder;
import com.liferay.portal.service.persistence.UserPersistence;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the device profile action local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.liferay.portal.mobile.service.impl.DeviceProfileActionLocalServiceImpl}.
 * </p>
 *
 * @author Edward C. Han
 * @see com.liferay.portal.mobile.service.impl.DeviceProfileActionLocalServiceImpl
 * @see com.liferay.portal.mobile.service.DeviceProfileActionLocalServiceUtil
 * @generated
 */
public abstract class DeviceProfileActionLocalServiceBaseImpl
	implements DeviceProfileActionLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.liferay.portal.mobile.service.DeviceProfileActionLocalServiceUtil} to access the device profile action local service.
	 */

	/**
	 * Adds the device profile action to the database. Also notifies the appropriate model listeners.
	 *
	 * @param deviceProfileAction the device profile action
	 * @return the device profile action that was added
	 * @throws SystemException if a system exception occurred
	 */
	public DeviceProfileAction addDeviceProfileAction(
		DeviceProfileAction deviceProfileAction) throws SystemException {
		deviceProfileAction.setNew(true);

		deviceProfileAction = deviceProfileActionPersistence.update(deviceProfileAction,
				false);

		Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

		if (indexer != null) {
			try {
				indexer.reindex(deviceProfileAction);
			}
			catch (SearchException se) {
				if (_log.isWarnEnabled()) {
					_log.warn(se, se);
				}
			}
		}

		return deviceProfileAction;
	}

	/**
	 * Creates a new device profile action with the primary key. Does not add the device profile action to the database.
	 *
	 * @param deviceProfileActionId the primary key for the new device profile action
	 * @return the new device profile action
	 */
	public DeviceProfileAction createDeviceProfileAction(
		long deviceProfileActionId) {
		return deviceProfileActionPersistence.create(deviceProfileActionId);
	}

	/**
	 * Deletes the device profile action with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param deviceProfileActionId the primary key of the device profile action
	 * @throws PortalException if a device profile action with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public void deleteDeviceProfileAction(long deviceProfileActionId)
		throws PortalException, SystemException {
		DeviceProfileAction deviceProfileAction = deviceProfileActionPersistence.remove(deviceProfileActionId);

		Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

		if (indexer != null) {
			try {
				indexer.delete(deviceProfileAction);
			}
			catch (SearchException se) {
				if (_log.isWarnEnabled()) {
					_log.warn(se, se);
				}
			}
		}
	}

	/**
	 * Deletes the device profile action from the database. Also notifies the appropriate model listeners.
	 *
	 * @param deviceProfileAction the device profile action
	 * @throws SystemException if a system exception occurred
	 */
	public void deleteDeviceProfileAction(
		DeviceProfileAction deviceProfileAction) throws SystemException {
		deviceProfileActionPersistence.remove(deviceProfileAction);

		Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

		if (indexer != null) {
			try {
				indexer.delete(deviceProfileAction);
			}
			catch (SearchException se) {
				if (_log.isWarnEnabled()) {
					_log.warn(se, se);
				}
			}
		}
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return deviceProfileActionPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return deviceProfileActionPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return deviceProfileActionPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return deviceProfileActionPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the device profile action with the primary key.
	 *
	 * @param deviceProfileActionId the primary key of the device profile action
	 * @return the device profile action
	 * @throws PortalException if a device profile action with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	public DeviceProfileAction getDeviceProfileAction(
		long deviceProfileActionId) throws PortalException, SystemException {
		return deviceProfileActionPersistence.findByPrimaryKey(deviceProfileActionId);
	}

	/**
	 * Returns a range of all the device profile actions.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
	 * </p>
	 *
	 * @param start the lower bound of the range of device profile actions
	 * @param end the upper bound of the range of device profile actions (not inclusive)
	 * @return the range of device profile actions
	 * @throws SystemException if a system exception occurred
	 */
	public List<DeviceProfileAction> getDeviceProfileActions(int start, int end)
		throws SystemException {
		return deviceProfileActionPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of device profile actions.
	 *
	 * @return the number of device profile actions
	 * @throws SystemException if a system exception occurred
	 */
	public int getDeviceProfileActionsCount() throws SystemException {
		return deviceProfileActionPersistence.countAll();
	}

	/**
	 * Updates the device profile action in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param deviceProfileAction the device profile action
	 * @return the device profile action that was updated
	 * @throws SystemException if a system exception occurred
	 */
	public DeviceProfileAction updateDeviceProfileAction(
		DeviceProfileAction deviceProfileAction) throws SystemException {
		return updateDeviceProfileAction(deviceProfileAction, true);
	}

	/**
	 * Updates the device profile action in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param deviceProfileAction the device profile action
	 * @param merge whether to merge the device profile action with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
	 * @return the device profile action that was updated
	 * @throws SystemException if a system exception occurred
	 */
	public DeviceProfileAction updateDeviceProfileAction(
		DeviceProfileAction deviceProfileAction, boolean merge)
		throws SystemException {
		deviceProfileAction.setNew(false);

		deviceProfileAction = deviceProfileActionPersistence.update(deviceProfileAction,
				merge);

		Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

		if (indexer != null) {
			try {
				indexer.reindex(deviceProfileAction);
			}
			catch (SearchException se) {
				if (_log.isWarnEnabled()) {
					_log.warn(se, se);
				}
			}
		}

		return deviceProfileAction;
	}

	/**
	 * Returns the device profile local service.
	 *
	 * @return the device profile local service
	 */
	public DeviceProfileLocalService getDeviceProfileLocalService() {
		return deviceProfileLocalService;
	}

	/**
	 * Sets the device profile local service.
	 *
	 * @param deviceProfileLocalService the device profile local service
	 */
	public void setDeviceProfileLocalService(
		DeviceProfileLocalService deviceProfileLocalService) {
		this.deviceProfileLocalService = deviceProfileLocalService;
	}

	/**
	 * Returns the device profile persistence.
	 *
	 * @return the device profile persistence
	 */
	public DeviceProfilePersistence getDeviceProfilePersistence() {
		return deviceProfilePersistence;
	}

	/**
	 * Sets the device profile persistence.
	 *
	 * @param deviceProfilePersistence the device profile persistence
	 */
	public void setDeviceProfilePersistence(
		DeviceProfilePersistence deviceProfilePersistence) {
		this.deviceProfilePersistence = deviceProfilePersistence;
	}

	/**
	 * Returns the device profile action local service.
	 *
	 * @return the device profile action local service
	 */
	public DeviceProfileActionLocalService getDeviceProfileActionLocalService() {
		return deviceProfileActionLocalService;
	}

	/**
	 * Sets the device profile action local service.
	 *
	 * @param deviceProfileActionLocalService the device profile action local service
	 */
	public void setDeviceProfileActionLocalService(
		DeviceProfileActionLocalService deviceProfileActionLocalService) {
		this.deviceProfileActionLocalService = deviceProfileActionLocalService;
	}

	/**
	 * Returns the device profile action persistence.
	 *
	 * @return the device profile action persistence
	 */
	public DeviceProfileActionPersistence getDeviceProfileActionPersistence() {
		return deviceProfileActionPersistence;
	}

	/**
	 * Sets the device profile action persistence.
	 *
	 * @param deviceProfileActionPersistence the device profile action persistence
	 */
	public void setDeviceProfileActionPersistence(
		DeviceProfileActionPersistence deviceProfileActionPersistence) {
		this.deviceProfileActionPersistence = deviceProfileActionPersistence;
	}

	/**
	 * Returns the device profile rule local service.
	 *
	 * @return the device profile rule local service
	 */
	public DeviceProfileRuleLocalService getDeviceProfileRuleLocalService() {
		return deviceProfileRuleLocalService;
	}

	/**
	 * Sets the device profile rule local service.
	 *
	 * @param deviceProfileRuleLocalService the device profile rule local service
	 */
	public void setDeviceProfileRuleLocalService(
		DeviceProfileRuleLocalService deviceProfileRuleLocalService) {
		this.deviceProfileRuleLocalService = deviceProfileRuleLocalService;
	}

	/**
	 * Returns the device profile rule persistence.
	 *
	 * @return the device profile rule persistence
	 */
	public DeviceProfileRulePersistence getDeviceProfileRulePersistence() {
		return deviceProfileRulePersistence;
	}

	/**
	 * Sets the device profile rule persistence.
	 *
	 * @param deviceProfileRulePersistence the device profile rule persistence
	 */
	public void setDeviceProfileRulePersistence(
		DeviceProfileRulePersistence deviceProfileRulePersistence) {
		this.deviceProfileRulePersistence = deviceProfileRulePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the resource remote service.
	 *
	 * @return the resource remote service
	 */
	public ResourceService getResourceService() {
		return resourceService;
	}

	/**
	 * Sets the resource remote service.
	 *
	 * @param resourceService the resource remote service
	 */
	public void setResourceService(ResourceService resourceService) {
		this.resourceService = resourceService;
	}

	/**
	 * Returns the resource persistence.
	 *
	 * @return the resource persistence
	 */
	public ResourcePersistence getResourcePersistence() {
		return resourcePersistence;
	}

	/**
	 * Sets the resource persistence.
	 *
	 * @param resourcePersistence the resource persistence
	 */
	public void setResourcePersistence(ResourcePersistence resourcePersistence) {
		this.resourcePersistence = resourcePersistence;
	}

	/**
	 * Returns the resource finder.
	 *
	 * @return the resource finder
	 */
	public ResourceFinder getResourceFinder() {
		return resourceFinder;
	}

	/**
	 * Sets the resource finder.
	 *
	 * @param resourceFinder the resource finder
	 */
	public void setResourceFinder(ResourceFinder resourceFinder) {
		this.resourceFinder = resourceFinder;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	/**
	 * Returns the user finder.
	 *
	 * @return the user finder
	 */
	public UserFinder getUserFinder() {
		return userFinder;
	}

	/**
	 * Sets the user finder.
	 *
	 * @param userFinder the user finder
	 */
	public void setUserFinder(UserFinder userFinder) {
		this.userFinder = userFinder;
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	protected Class<?> getModelClass() {
		return DeviceProfileAction.class;
	}

	protected String getModelClassName() {
		return DeviceProfileAction.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = deviceProfileActionPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = DeviceProfileLocalService.class)
	protected DeviceProfileLocalService deviceProfileLocalService;
	@BeanReference(type = DeviceProfilePersistence.class)
	protected DeviceProfilePersistence deviceProfilePersistence;
	@BeanReference(type = DeviceProfileActionLocalService.class)
	protected DeviceProfileActionLocalService deviceProfileActionLocalService;
	@BeanReference(type = DeviceProfileActionPersistence.class)
	protected DeviceProfileActionPersistence deviceProfileActionPersistence;
	@BeanReference(type = DeviceProfileRuleLocalService.class)
	protected DeviceProfileRuleLocalService deviceProfileRuleLocalService;
	@BeanReference(type = DeviceProfileRulePersistence.class)
	protected DeviceProfileRulePersistence deviceProfileRulePersistence;
	@BeanReference(type = CounterLocalService.class)
	protected CounterLocalService counterLocalService;
	@BeanReference(type = ResourceLocalService.class)
	protected ResourceLocalService resourceLocalService;
	@BeanReference(type = ResourceService.class)
	protected ResourceService resourceService;
	@BeanReference(type = ResourcePersistence.class)
	protected ResourcePersistence resourcePersistence;
	@BeanReference(type = ResourceFinder.class)
	protected ResourceFinder resourceFinder;
	@BeanReference(type = UserLocalService.class)
	protected UserLocalService userLocalService;
	@BeanReference(type = UserService.class)
	protected UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@BeanReference(type = UserFinder.class)
	protected UserFinder userFinder;
	private static Log _log = LogFactoryUtil.getLog(DeviceProfileActionLocalServiceBaseImpl.class);
	private String _beanIdentifier;
}