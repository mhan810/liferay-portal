/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.mobile.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.language.LanguageUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.HtmlUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.mobile.model.DeviceProfileRule;
import com.liferay.portal.mobile.model.DeviceProfileRuleModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.lang.reflect.Proxy;

import java.sql.Types;

import java.util.Locale;
import java.util.Map;

/**
 * The base model implementation for the DeviceProfileRule service. Represents a row in the &quot;DeviceProfileRule&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.portal.mobile.model.DeviceProfileRuleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DeviceProfileRuleImpl}.
 * </p>
 *
 * @author Edward C. Han
 * @see DeviceProfileRuleImpl
 * @see com.liferay.portal.mobile.model.DeviceProfileRule
 * @see com.liferay.portal.mobile.model.DeviceProfileRuleModel
 * @generated
 */
public class DeviceProfileRuleModelImpl extends BaseModelImpl<DeviceProfileRule>
	implements DeviceProfileRuleModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a device profile rule model instance should use the {@link com.liferay.portal.mobile.model.DeviceProfileRule} interface instead.
	 */
	public static final String TABLE_NAME = "DeviceProfileRule";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "deviceProfileRuleId", Types.BIGINT },
			{ "deviceProfileId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "ruleType", Types.VARCHAR },
			{ "ruleTypeSettings", Types.CLOB }
		};
	public static final String TABLE_SQL_CREATE = "create table DeviceProfileRule (uuid_ VARCHAR(75) null,deviceProfileRuleId LONG not null primary key,deviceProfileId LONG,name STRING null,description STRING null,ruleType VARCHAR(75) null,ruleTypeSettings TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table DeviceProfileRule";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.liferay.portal.mobile.model.DeviceProfileRule"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.liferay.portal.mobile.model.DeviceProfileRule"),
			true);

	public Class<?> getModelClass() {
		return DeviceProfileRule.class;
	}

	public String getModelClassName() {
		return DeviceProfileRule.class.getName();
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.portal.util.PropsUtil.get(
				"lock.expiration.time.com.liferay.portal.mobile.model.DeviceProfileRule"));

	public DeviceProfileRuleModelImpl() {
	}

	public long getPrimaryKey() {
		return _deviceProfileRuleId;
	}

	public void setPrimaryKey(long primaryKey) {
		setDeviceProfileRuleId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_deviceProfileRuleId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		_uuid = uuid;
	}

	public long getDeviceProfileRuleId() {
		return _deviceProfileRuleId;
	}

	public void setDeviceProfileRuleId(long deviceProfileRuleId) {
		_deviceProfileRuleId = deviceProfileRuleId;
	}

	public long getDeviceProfileId() {
		return _deviceProfileId;
	}

	public void setDeviceProfileId(long deviceProfileId) {
		_deviceProfileId = deviceProfileId;
	}

	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public String getName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId);
	}

	public String getName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId, useDefault);
	}

	public String getName(String languageId) {
		String value = LocalizationUtil.getLocalization(getName(), languageId);

		if (isEscapedModel()) {
			return HtmlUtil.escape(value);
		}
		else {
			return value;
		}
	}

	public String getName(String languageId, boolean useDefault) {
		String value = LocalizationUtil.getLocalization(getName(), languageId,
				useDefault);

		if (isEscapedModel()) {
			return HtmlUtil.escape(value);
		}
		else {
			return value;
		}
	}

	public Map<Locale, String> getNameMap() {
		return LocalizationUtil.getLocalizationMap(getName());
	}

	public void setName(String name) {
		_name = name;
	}

	public void setName(String name, Locale locale) {
		setName(name, locale, LocaleUtil.getDefault());
	}

	public void setName(String name, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(name)) {
			setName(LocalizationUtil.updateLocalization(getName(), "Name",
					name, languageId, defaultLanguageId));
		}
		else {
			setName(LocalizationUtil.removeLocalization(getName(), "Name",
					languageId));
		}
	}

	public void setNameMap(Map<Locale, String> nameMap) {
		setNameMap(nameMap, LocaleUtil.getDefault());
	}

	public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale) {
		if (nameMap == null) {
			return;
		}

		Locale[] locales = LanguageUtil.getAvailableLocales();

		for (Locale locale : locales) {
			String name = nameMap.get(locale);

			setName(name, locale, defaultLocale);
		}
	}

	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	public String getDescription(String languageId) {
		String value = LocalizationUtil.getLocalization(getDescription(),
				languageId);

		if (isEscapedModel()) {
			return HtmlUtil.escape(value);
		}
		else {
			return value;
		}
	}

	public String getDescription(String languageId, boolean useDefault) {
		String value = LocalizationUtil.getLocalization(getDescription(),
				languageId, useDefault);

		if (isEscapedModel()) {
			return HtmlUtil.escape(value);
		}
		else {
			return value;
		}
	}

	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	public void setDescription(String description) {
		_description = description;
	}

	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getDefault());
	}

	public void setDescription(String description, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getDefault());
	}

	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale) {
		if (descriptionMap == null) {
			return;
		}

		Locale[] locales = LanguageUtil.getAvailableLocales();

		for (Locale locale : locales) {
			String description = descriptionMap.get(locale);

			setDescription(description, locale, defaultLocale);
		}
	}

	public String getRuleType() {
		if (_ruleType == null) {
			return StringPool.BLANK;
		}
		else {
			return _ruleType;
		}
	}

	public void setRuleType(String ruleType) {
		_ruleType = ruleType;
	}

	public String getRuleTypeSettings() {
		if (_ruleTypeSettings == null) {
			return StringPool.BLANK;
		}
		else {
			return _ruleTypeSettings;
		}
	}

	public void setRuleTypeSettings(String ruleTypeSettings) {
		_ruleTypeSettings = ruleTypeSettings;
	}

	@Override
	public DeviceProfileRule toEscapedModel() {
		if (isEscapedModel()) {
			return (DeviceProfileRule)this;
		}
		else {
			if (_escapedModelProxy == null) {
				_escapedModelProxy = (DeviceProfileRule)Proxy.newProxyInstance(_classLoader,
						_escapedModelProxyInterfaces,
						new AutoEscapeBeanHandler(this));
			}

			return _escapedModelProxy;
		}
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(0,
					DeviceProfileRule.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		DeviceProfileRuleImpl deviceProfileRuleImpl = new DeviceProfileRuleImpl();

		deviceProfileRuleImpl.setUuid(getUuid());
		deviceProfileRuleImpl.setDeviceProfileRuleId(getDeviceProfileRuleId());
		deviceProfileRuleImpl.setDeviceProfileId(getDeviceProfileId());
		deviceProfileRuleImpl.setName(getName());
		deviceProfileRuleImpl.setDescription(getDescription());
		deviceProfileRuleImpl.setRuleType(getRuleType());
		deviceProfileRuleImpl.setRuleTypeSettings(getRuleTypeSettings());

		deviceProfileRuleImpl.resetOriginalValues();

		return deviceProfileRuleImpl;
	}

	public int compareTo(DeviceProfileRule deviceProfileRule) {
		long primaryKey = deviceProfileRule.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		DeviceProfileRule deviceProfileRule = null;

		try {
			deviceProfileRule = (DeviceProfileRule)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = deviceProfileRule.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<DeviceProfileRule> toCacheModel() {
		DeviceProfileRuleCacheModel deviceProfileRuleCacheModel = new DeviceProfileRuleCacheModel();

		deviceProfileRuleCacheModel.uuid = getUuid();

		String uuid = deviceProfileRuleCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			deviceProfileRuleCacheModel.uuid = null;
		}

		deviceProfileRuleCacheModel.deviceProfileRuleId = getDeviceProfileRuleId();

		deviceProfileRuleCacheModel.deviceProfileId = getDeviceProfileId();

		deviceProfileRuleCacheModel.name = getName();

		String name = deviceProfileRuleCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			deviceProfileRuleCacheModel.name = null;
		}

		deviceProfileRuleCacheModel.description = getDescription();

		String description = deviceProfileRuleCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			deviceProfileRuleCacheModel.description = null;
		}

		deviceProfileRuleCacheModel.ruleType = getRuleType();

		String ruleType = deviceProfileRuleCacheModel.ruleType;

		if ((ruleType != null) && (ruleType.length() == 0)) {
			deviceProfileRuleCacheModel.ruleType = null;
		}

		deviceProfileRuleCacheModel.ruleTypeSettings = getRuleTypeSettings();

		String ruleTypeSettings = deviceProfileRuleCacheModel.ruleTypeSettings;

		if ((ruleTypeSettings != null) && (ruleTypeSettings.length() == 0)) {
			deviceProfileRuleCacheModel.ruleTypeSettings = null;
		}

		return deviceProfileRuleCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", deviceProfileRuleId=");
		sb.append(getDeviceProfileRuleId());
		sb.append(", deviceProfileId=");
		sb.append(getDeviceProfileId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", ruleType=");
		sb.append(getRuleType());
		sb.append(", ruleTypeSettings=");
		sb.append(getRuleTypeSettings());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.liferay.portal.mobile.model.DeviceProfileRule");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deviceProfileRuleId</column-name><column-value><![CDATA[");
		sb.append(getDeviceProfileRuleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deviceProfileId</column-name><column-value><![CDATA[");
		sb.append(getDeviceProfileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ruleType</column-name><column-value><![CDATA[");
		sb.append(getRuleType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ruleTypeSettings</column-name><column-value><![CDATA[");
		sb.append(getRuleTypeSettings());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DeviceProfileRule.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			DeviceProfileRule.class
		};
	private String _uuid;
	private long _deviceProfileRuleId;
	private long _deviceProfileId;
	private String _name;
	private String _description;
	private String _ruleType;
	private String _ruleTypeSettings;
	private transient ExpandoBridge _expandoBridge;
	private DeviceProfileRule _escapedModelProxy;
}