/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.SystemEventEntry;
import com.liferay.portal.model.SystemEventEntryModel;
import com.liferay.portal.model.SystemEventEntrySoap;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SystemEventEntry service. Represents a row in the &quot;SystemEventEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.portal.model.SystemEventEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SystemEventEntryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SystemEventEntryImpl
 * @see com.liferay.portal.model.SystemEventEntry
 * @see com.liferay.portal.model.SystemEventEntryModel
 * @generated
 */
@JSON(strict = true)
public class SystemEventEntryModelImpl extends BaseModelImpl<SystemEventEntry>
	implements SystemEventEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a system event entry model instance should use the {@link com.liferay.portal.model.SystemEventEntry} interface instead.
	 */
	public static final String TABLE_NAME = "SystemEventEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "systemEventId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "eventType", Types.INTEGER },
			{ "classNameId", Types.BIGINT },
			{ "classPK", Types.BIGINT },
			{ "classUuid", Types.VARCHAR },
			{ "eventSet", Types.VARCHAR },
			{ "eventId", Types.VARCHAR },
			{ "parentEventId", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table SystemEventEntry (systemEventId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,eventType INTEGER,classNameId LONG,classPK LONG,classUuid VARCHAR(75) null,eventSet VARCHAR(75) null,eventId VARCHAR(75) null,parentEventId VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table SystemEventEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY systemEventEntry.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY SystemEventEntry.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.liferay.portal.model.SystemEventEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.liferay.portal.model.SystemEventEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.liferay.portal.model.SystemEventEntry"),
			true);
	public static long CLASSNAMEID_COLUMN_BITMASK = 1L;
	public static long CLASSPK_COLUMN_BITMASK = 2L;
	public static long EVENTTYPE_COLUMN_BITMASK = 4L;
	public static long GROUPID_COLUMN_BITMASK = 8L;
	public static long CREATEDATE_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SystemEventEntry toModel(SystemEventEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SystemEventEntry model = new SystemEventEntryImpl();

		model.setSystemEventId(soapModel.getSystemEventId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setEventType(soapModel.getEventType());
		model.setClassNameId(soapModel.getClassNameId());
		model.setClassPK(soapModel.getClassPK());
		model.setClassUuid(soapModel.getClassUuid());
		model.setEventSet(soapModel.getEventSet());
		model.setEventId(soapModel.getEventId());
		model.setParentEventId(soapModel.getParentEventId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SystemEventEntry> toModels(
		SystemEventEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SystemEventEntry> models = new ArrayList<SystemEventEntry>(soapModels.length);

		for (SystemEventEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.portal.util.PropsUtil.get(
				"lock.expiration.time.com.liferay.portal.model.SystemEventEntry"));

	public SystemEventEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _systemEventId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSystemEventId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _systemEventId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SystemEventEntry.class;
	}

	@Override
	public String getModelClassName() {
		return SystemEventEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("systemEventId", getSystemEventId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("eventType", getEventType());
		attributes.put("classNameId", getClassNameId());
		attributes.put("classPK", getClassPK());
		attributes.put("classUuid", getClassUuid());
		attributes.put("eventSet", getEventSet());
		attributes.put("eventId", getEventId());
		attributes.put("parentEventId", getParentEventId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long systemEventId = (Long)attributes.get("systemEventId");

		if (systemEventId != null) {
			setSystemEventId(systemEventId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Integer eventType = (Integer)attributes.get("eventType");

		if (eventType != null) {
			setEventType(eventType);
		}

		Long classNameId = (Long)attributes.get("classNameId");

		if (classNameId != null) {
			setClassNameId(classNameId);
		}

		Long classPK = (Long)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}

		String classUuid = (String)attributes.get("classUuid");

		if (classUuid != null) {
			setClassUuid(classUuid);
		}

		String eventSet = (String)attributes.get("eventSet");

		if (eventSet != null) {
			setEventSet(eventSet);
		}

		String eventId = (String)attributes.get("eventId");

		if (eventId != null) {
			setEventId(eventId);
		}

		String parentEventId = (String)attributes.get("parentEventId");

		if (parentEventId != null) {
			setParentEventId(parentEventId);
		}
	}

	@Override
	@JSON
	public long getSystemEventId() {
		return _systemEventId;
	}

	@Override
	public void setSystemEventId(long systemEventId) {
		_systemEventId = systemEventId;
	}

	@Override
	@JSON
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	@JSON
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	@JSON
	public int getEventType() {
		return _eventType;
	}

	@Override
	public void setEventType(int eventType) {
		_columnBitmask |= EVENTTYPE_COLUMN_BITMASK;

		if (!_setOriginalEventType) {
			_setOriginalEventType = true;

			_originalEventType = _eventType;
		}

		_eventType = eventType;
	}

	public int getOriginalEventType() {
		return _originalEventType;
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return StringPool.BLANK;
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@Override
	@JSON
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		_columnBitmask |= CLASSNAMEID_COLUMN_BITMASK;

		if (!_setOriginalClassNameId) {
			_setOriginalClassNameId = true;

			_originalClassNameId = _classNameId;
		}

		_classNameId = classNameId;
	}

	public long getOriginalClassNameId() {
		return _originalClassNameId;
	}

	@Override
	@JSON
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (!_setOriginalClassPK) {
			_setOriginalClassPK = true;

			_originalClassPK = _classPK;
		}

		_classPK = classPK;
	}

	public long getOriginalClassPK() {
		return _originalClassPK;
	}

	@Override
	@JSON
	public String getClassUuid() {
		if (_classUuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _classUuid;
		}
	}

	@Override
	public void setClassUuid(String classUuid) {
		_classUuid = classUuid;
	}

	@Override
	@JSON
	public String getEventSet() {
		if (_eventSet == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventSet;
		}
	}

	@Override
	public void setEventSet(String eventSet) {
		_eventSet = eventSet;
	}

	@Override
	@JSON
	public String getEventId() {
		if (_eventId == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventId;
		}
	}

	@Override
	public void setEventId(String eventId) {
		_eventId = eventId;
	}

	@Override
	@JSON
	public String getParentEventId() {
		if (_parentEventId == null) {
			return StringPool.BLANK;
		}
		else {
			return _parentEventId;
		}
	}

	@Override
	public void setParentEventId(String parentEventId) {
		_parentEventId = parentEventId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SystemEventEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SystemEventEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SystemEventEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SystemEventEntryImpl systemEventEntryImpl = new SystemEventEntryImpl();

		systemEventEntryImpl.setSystemEventId(getSystemEventId());
		systemEventEntryImpl.setGroupId(getGroupId());
		systemEventEntryImpl.setCompanyId(getCompanyId());
		systemEventEntryImpl.setUserId(getUserId());
		systemEventEntryImpl.setUserName(getUserName());
		systemEventEntryImpl.setCreateDate(getCreateDate());
		systemEventEntryImpl.setEventType(getEventType());
		systemEventEntryImpl.setClassNameId(getClassNameId());
		systemEventEntryImpl.setClassPK(getClassPK());
		systemEventEntryImpl.setClassUuid(getClassUuid());
		systemEventEntryImpl.setEventSet(getEventSet());
		systemEventEntryImpl.setEventId(getEventId());
		systemEventEntryImpl.setParentEventId(getParentEventId());

		systemEventEntryImpl.resetOriginalValues();

		return systemEventEntryImpl;
	}

	@Override
	public int compareTo(SystemEventEntry systemEventEntry) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				systemEventEntry.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SystemEventEntry)) {
			return false;
		}

		SystemEventEntry systemEventEntry = (SystemEventEntry)obj;

		long primaryKey = systemEventEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SystemEventEntryModelImpl systemEventEntryModelImpl = this;

		systemEventEntryModelImpl._originalGroupId = systemEventEntryModelImpl._groupId;

		systemEventEntryModelImpl._setOriginalGroupId = false;

		systemEventEntryModelImpl._originalEventType = systemEventEntryModelImpl._eventType;

		systemEventEntryModelImpl._setOriginalEventType = false;

		systemEventEntryModelImpl._originalClassNameId = systemEventEntryModelImpl._classNameId;

		systemEventEntryModelImpl._setOriginalClassNameId = false;

		systemEventEntryModelImpl._originalClassPK = systemEventEntryModelImpl._classPK;

		systemEventEntryModelImpl._setOriginalClassPK = false;

		systemEventEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SystemEventEntry> toCacheModel() {
		SystemEventEntryCacheModel systemEventEntryCacheModel = new SystemEventEntryCacheModel();

		systemEventEntryCacheModel.systemEventId = getSystemEventId();

		systemEventEntryCacheModel.groupId = getGroupId();

		systemEventEntryCacheModel.companyId = getCompanyId();

		systemEventEntryCacheModel.userId = getUserId();

		systemEventEntryCacheModel.userName = getUserName();

		String userName = systemEventEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			systemEventEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			systemEventEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			systemEventEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		systemEventEntryCacheModel.eventType = getEventType();

		systemEventEntryCacheModel.classNameId = getClassNameId();

		systemEventEntryCacheModel.classPK = getClassPK();

		systemEventEntryCacheModel.classUuid = getClassUuid();

		String classUuid = systemEventEntryCacheModel.classUuid;

		if ((classUuid != null) && (classUuid.length() == 0)) {
			systemEventEntryCacheModel.classUuid = null;
		}

		systemEventEntryCacheModel.eventSet = getEventSet();

		String eventSet = systemEventEntryCacheModel.eventSet;

		if ((eventSet != null) && (eventSet.length() == 0)) {
			systemEventEntryCacheModel.eventSet = null;
		}

		systemEventEntryCacheModel.eventId = getEventId();

		String eventId = systemEventEntryCacheModel.eventId;

		if ((eventId != null) && (eventId.length() == 0)) {
			systemEventEntryCacheModel.eventId = null;
		}

		systemEventEntryCacheModel.parentEventId = getParentEventId();

		String parentEventId = systemEventEntryCacheModel.parentEventId;

		if ((parentEventId != null) && (parentEventId.length() == 0)) {
			systemEventEntryCacheModel.parentEventId = null;
		}

		return systemEventEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{systemEventId=");
		sb.append(getSystemEventId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", eventType=");
		sb.append(getEventType());
		sb.append(", classNameId=");
		sb.append(getClassNameId());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append(", classUuid=");
		sb.append(getClassUuid());
		sb.append(", eventSet=");
		sb.append(getEventSet());
		sb.append(", eventId=");
		sb.append(getEventId());
		sb.append(", parentEventId=");
		sb.append(getParentEventId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.liferay.portal.model.SystemEventEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>systemEventId</column-name><column-value><![CDATA[");
		sb.append(getSystemEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventType</column-name><column-value><![CDATA[");
		sb.append(getEventType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classNameId</column-name><column-value><![CDATA[");
		sb.append(getClassNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classUuid</column-name><column-value><![CDATA[");
		sb.append(getClassUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventSet</column-name><column-value><![CDATA[");
		sb.append(getEventSet());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventId</column-name><column-value><![CDATA[");
		sb.append(getEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentEventId</column-name><column-value><![CDATA[");
		sb.append(getParentEventId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SystemEventEntry.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SystemEventEntry.class
		};
	private long _systemEventId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private int _eventType;
	private int _originalEventType;
	private boolean _setOriginalEventType;
	private long _classNameId;
	private long _originalClassNameId;
	private boolean _setOriginalClassNameId;
	private long _classPK;
	private long _originalClassPK;
	private boolean _setOriginalClassPK;
	private String _classUuid;
	private String _eventSet;
	private String _eventId;
	private String _parentEventId;
	private long _columnBitmask;
	private SystemEventEntry _escapedModel;
}