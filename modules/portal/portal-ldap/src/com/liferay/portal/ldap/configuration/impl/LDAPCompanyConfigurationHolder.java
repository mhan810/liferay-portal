/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.ldap.configuration.impl;

import aQute.bnd.annotation.metatype.Configurable;

import com.liferay.portal.ldap.configuration.LDAPCompanyConfiguration;

import java.util.Map;

import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Modified;

/**
 * @author Iv√°n Zaera
 */
@Component(
	configurationPid = "com.liferay.portal.ldap.cfgadm.LDAPCompanyConfiguration",
	immediate = true
)
public class LDAPCompanyConfigurationHolder
	implements LDAPCompanyConfiguration {

	@Override
	public long companyId() {
		return _ldapCompanyConfiguration.companyId();
	}

	@Override
	public boolean exportEnabled() {
		return _ldapCompanyConfiguration.exportEnabled();
	}

	@Override
	public boolean exportGroupEnabled() {
		return _ldapCompanyConfiguration.exportGroupEnabled();
	}

	@Override
	public String factoryInitial() {
		return _ldapCompanyConfiguration.factoryInitial();
	}

	@Override
	public boolean importCreateRolePerGroup() {
		return _ldapCompanyConfiguration.importCreateRolePerGroup();
	}

	@Override
	public boolean importEnabled() {
		return _ldapCompanyConfiguration.importEnabled();
	}

	@Override
	public boolean importGroupCacheEnabled() {
		return _ldapCompanyConfiguration.importGroupCacheEnabled();
	}

	@Override
	public boolean importGroupSearchFilterEnabled() {
		return _ldapCompanyConfiguration.importGroupSearchFilterEnabled();
	}

	@Override
	public int importInterval() {
		return _ldapCompanyConfiguration.importInterval();
	}

	@Override
	public long importLockExpirationTime() {
		return _ldapCompanyConfiguration.importLockExpirationTime();
	}

	@Override
	public String importMethod() {
		return _ldapCompanyConfiguration.importMethod();
	}

	@Override
	public boolean importOnStartup() {
		return _ldapCompanyConfiguration.importOnStartup();
	}

	@Override
	public boolean importUserPasswordAutogenerated() {
		return _ldapCompanyConfiguration.importUserPasswordAutogenerated();
	}

	@Override
	public String importUserPasswordDefault() {
		return _ldapCompanyConfiguration.importUserPasswordDefault();
	}

	@Override
	public boolean importUserPasswordEnabled() {
		return _ldapCompanyConfiguration.importUserPasswordEnabled();
	}

	@Override
	public String importUserSyncStrategy() {
		return _ldapCompanyConfiguration.importUserSyncStrategy();
	}

	@Override
	public int pageSize() {
		return _ldapCompanyConfiguration.pageSize();
	}

	@Override
	public boolean passwordPolicyEnabled() {
		return _ldapCompanyConfiguration.passwordPolicyEnabled();
	}

	@Override
	public int rangeSize() {
		return _ldapCompanyConfiguration.rangeSize();
	}

	@Override
	public String referral() {
		return _ldapCompanyConfiguration.referral();
	}

	@Override
	public String[] userIgnoreAttributes() {
		return _ldapCompanyConfiguration.userIgnoreAttributes();
	}

	@Activate
	@Modified
	protected void activate(Map<String, Object> properties) {
		_ldapCompanyConfiguration = Configurable.createConfigurable(
			LDAPCompanyConfiguration.class, properties);
	}

	private volatile LDAPCompanyConfiguration _ldapCompanyConfiguration;

}