/**
 * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portal.mobile.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the DeviceProfileRule service. Represents a row in the &quot;DeviceProfileRule&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.liferay.portal.mobile.model.impl.DeviceProfileRuleModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.liferay.portal.mobile.model.impl.DeviceProfileRuleImpl}.
 * </p>
 *
 * @author Edward C. Han
 * @see DeviceProfileRule
 * @see com.liferay.portal.mobile.model.impl.DeviceProfileRuleImpl
 * @see com.liferay.portal.mobile.model.impl.DeviceProfileRuleModelImpl
 * @generated
 */
public interface DeviceProfileRuleModel extends BaseModel<DeviceProfileRule> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a device profile rule model instance should use the {@link DeviceProfileRule} interface instead.
	 */

	/**
	 * Returns the primary key of this device profile rule.
	 *
	 * @return the primary key of this device profile rule
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this device profile rule.
	 *
	 * @param primaryKey the primary key of this device profile rule
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this device profile rule.
	 *
	 * @return the uuid of this device profile rule
	 */
	@AutoEscape
	public String getUuid();

	/**
	 * Sets the uuid of this device profile rule.
	 *
	 * @param uuid the uuid of this device profile rule
	 */
	public void setUuid(String uuid);

	/**
	 * Returns the device profile rule ID of this device profile rule.
	 *
	 * @return the device profile rule ID of this device profile rule
	 */
	public long getDeviceProfileRuleId();

	/**
	 * Sets the device profile rule ID of this device profile rule.
	 *
	 * @param deviceProfileRuleId the device profile rule ID of this device profile rule
	 */
	public void setDeviceProfileRuleId(long deviceProfileRuleId);

	/**
	 * Returns the group ID of this device profile rule.
	 *
	 * @return the group ID of this device profile rule
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this device profile rule.
	 *
	 * @param groupId the group ID of this device profile rule
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the device profile ID of this device profile rule.
	 *
	 * @return the device profile ID of this device profile rule
	 */
	public long getDeviceProfileId();

	/**
	 * Sets the device profile ID of this device profile rule.
	 *
	 * @param deviceProfileId the device profile ID of this device profile rule
	 */
	public void setDeviceProfileId(long deviceProfileId);

	/**
	 * Returns the name of this device profile rule.
	 *
	 * @return the name of this device profile rule
	 */
	public String getName();

	/**
	 * Returns the localized name of this device profile rule in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized name of this device profile rule
	 */
	public String getName(Locale locale);

	/**
	 * Returns the localized name of this device profile rule in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized name of this device profile rule. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	public String getName(Locale locale, boolean useDefault);

	/**
	 * Returns the localized name of this device profile rule in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized name of this device profile rule
	 */
	public String getName(String languageId);

	/**
	 * Returns the localized name of this device profile rule in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized name of this device profile rule
	 */
	public String getName(String languageId, boolean useDefault);

	/**
	 * Returns a map of the locales and localized names of this device profile rule.
	 *
	 * @return the locales and localized names of this device profile rule
	 */
	public Map<Locale, String> getNameMap();

	/**
	 * Sets the name of this device profile rule.
	 *
	 * @param name the name of this device profile rule
	 */
	public void setName(String name);

	/**
	 * Sets the localized name of this device profile rule in the language.
	 *
	 * @param name the localized name of this device profile rule
	 * @param locale the locale of the language
	 */
	public void setName(String name, Locale locale);

	/**
	 * Sets the localized name of this device profile rule in the language, and sets the default locale.
	 *
	 * @param name the localized name of this device profile rule
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setName(String name, Locale locale, Locale defaultLocale);

	/**
	 * Sets the localized names of this device profile rule from the map of locales and localized names.
	 *
	 * @param nameMap the locales and localized names of this device profile rule
	 */
	public void setNameMap(Map<Locale, String> nameMap);

	/**
	 * Sets the localized names of this device profile rule from the map of locales and localized names, and sets the default locale.
	 *
	 * @param nameMap the locales and localized names of this device profile rule
	 * @param defaultLocale the default locale
	 */
	public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale);

	/**
	 * Returns the description of this device profile rule.
	 *
	 * @return the description of this device profile rule
	 */
	public String getDescription();

	/**
	 * Returns the localized description of this device profile rule in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized description of this device profile rule
	 */
	public String getDescription(Locale locale);

	/**
	 * Returns the localized description of this device profile rule in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized description of this device profile rule. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	public String getDescription(Locale locale, boolean useDefault);

	/**
	 * Returns the localized description of this device profile rule in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized description of this device profile rule
	 */
	public String getDescription(String languageId);

	/**
	 * Returns the localized description of this device profile rule in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized description of this device profile rule
	 */
	public String getDescription(String languageId, boolean useDefault);

	/**
	 * Returns a map of the locales and localized descriptions of this device profile rule.
	 *
	 * @return the locales and localized descriptions of this device profile rule
	 */
	public Map<Locale, String> getDescriptionMap();

	/**
	 * Sets the description of this device profile rule.
	 *
	 * @param description the description of this device profile rule
	 */
	public void setDescription(String description);

	/**
	 * Sets the localized description of this device profile rule in the language.
	 *
	 * @param description the localized description of this device profile rule
	 * @param locale the locale of the language
	 */
	public void setDescription(String description, Locale locale);

	/**
	 * Sets the localized description of this device profile rule in the language, and sets the default locale.
	 *
	 * @param description the localized description of this device profile rule
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setDescription(String description, Locale locale,
		Locale defaultLocale);

	/**
	 * Sets the localized descriptions of this device profile rule from the map of locales and localized descriptions.
	 *
	 * @param descriptionMap the locales and localized descriptions of this device profile rule
	 */
	public void setDescriptionMap(Map<Locale, String> descriptionMap);

	/**
	 * Sets the localized descriptions of this device profile rule from the map of locales and localized descriptions, and sets the default locale.
	 *
	 * @param descriptionMap the locales and localized descriptions of this device profile rule
	 * @param defaultLocale the default locale
	 */
	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale);

	/**
	 * Returns the rule type of this device profile rule.
	 *
	 * @return the rule type of this device profile rule
	 */
	@AutoEscape
	public String getRuleType();

	/**
	 * Sets the rule type of this device profile rule.
	 *
	 * @param ruleType the rule type of this device profile rule
	 */
	public void setRuleType(String ruleType);

	/**
	 * Returns the rule type settings of this device profile rule.
	 *
	 * @return the rule type settings of this device profile rule
	 */
	@AutoEscape
	public String getRuleTypeSettings();

	/**
	 * Sets the rule type settings of this device profile rule.
	 *
	 * @param ruleTypeSettings the rule type settings of this device profile rule
	 */
	public void setRuleTypeSettings(String ruleTypeSettings);

	public boolean isNew();

	public void setNew(boolean n);

	public boolean isCachedModel();

	public void setCachedModel(boolean cachedModel);

	public boolean isEscapedModel();

	public void setEscapedModel(boolean escapedModel);

	public Serializable getPrimaryKeyObj();

	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	public ExpandoBridge getExpandoBridge();

	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public Object clone();

	public int compareTo(DeviceProfileRule deviceProfileRule);

	public int hashCode();

	public CacheModel<DeviceProfileRule> toCacheModel();

	public DeviceProfileRule toEscapedModel();

	public String toString();

	public String toXmlString();
}